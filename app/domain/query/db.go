// Code generated by sqlc. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countSeratsStmt, err = db.PrepareContext(ctx, countSerats); err != nil {
		return nil, fmt.Errorf("error preparing query CountSerats: %w", err)
	}
	if q.createSeratStmt, err = db.PrepareContext(ctx, createSerat); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSerat: %w", err)
	}
	if q.deleteSeratStmt, err = db.PrepareContext(ctx, deleteSerat); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSerat: %w", err)
	}
	if q.getSeratStmt, err = db.PrepareContext(ctx, getSerat); err != nil {
		return nil, fmt.Errorf("error preparing query GetSerat: %w", err)
	}
	if q.listSeratsStmt, err = db.PrepareContext(ctx, listSerats); err != nil {
		return nil, fmt.Errorf("error preparing query ListSerats: %w", err)
	}
	if q.updateSeratStmt, err = db.PrepareContext(ctx, updateSerat); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSerat: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countSeratsStmt != nil {
		if cerr := q.countSeratsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countSeratsStmt: %w", cerr)
		}
	}
	if q.createSeratStmt != nil {
		if cerr := q.createSeratStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSeratStmt: %w", cerr)
		}
	}
	if q.deleteSeratStmt != nil {
		if cerr := q.deleteSeratStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSeratStmt: %w", cerr)
		}
	}
	if q.getSeratStmt != nil {
		if cerr := q.getSeratStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSeratStmt: %w", cerr)
		}
	}
	if q.listSeratsStmt != nil {
		if cerr := q.listSeratsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSeratsStmt: %w", cerr)
		}
	}
	if q.updateSeratStmt != nil {
		if cerr := q.updateSeratStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSeratStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db              DBTX
	tx              *sql.Tx
	countSeratsStmt *sql.Stmt
	createSeratStmt *sql.Stmt
	deleteSeratStmt *sql.Stmt
	getSeratStmt    *sql.Stmt
	listSeratsStmt  *sql.Stmt
	updateSeratStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:              tx,
		tx:              tx,
		countSeratsStmt: q.countSeratsStmt,
		createSeratStmt: q.createSeratStmt,
		deleteSeratStmt: q.deleteSeratStmt,
		getSeratStmt:    q.getSeratStmt,
		listSeratsStmt:  q.listSeratsStmt,
		updateSeratStmt: q.updateSeratStmt,
	}
}
