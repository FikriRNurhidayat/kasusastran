// Code generated by sqlc. DO NOT EDIT.
// source: wulangan.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countWulangans = `-- name: CountWulangans :one
SELECT COUNT(wulangans.id) FROM wulangans WHERE deleted_at IS NULL
`

func (q *Queries) CountWulangans(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countWulangansStmt, countWulangans)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWulangan = `-- name: CreateWulangan :one
INSERT INTO wulangans (
  title,
  description,
  cover_image_url,
  thumbnail_image_url,
  created_at,
  updated_at
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  NOW(),
  NOW()
)
RETURNING
  id,
  title,
  description,
  cover_image_url,
  thumbnail_image_url,
  created_at,
  updated_at
`

type CreateWulanganParams struct {
	Title             string `json:"title"`
	Description       string `json:"description"`
	CoverImageUrl     string `json:"cover_image_url"`
	ThumbnailImageUrl string `json:"thumbnail_image_url"`
}

type CreateWulanganRow struct {
	ID                uuid.UUID `json:"id"`
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateWulangan(ctx context.Context, arg *CreateWulanganParams) (CreateWulanganRow, error) {
	row := q.queryRow(ctx, q.createWulanganStmt, createWulangan,
		arg.Title,
		arg.Description,
		arg.CoverImageUrl,
		arg.ThumbnailImageUrl,
	)
	var i CreateWulanganRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CoverImageUrl,
		&i.ThumbnailImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWulangan = `-- name: DeleteWulangan :exec
UPDATE wulangans SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteWulangan(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteWulanganStmt, deleteWulangan, id)
	return err
}

const getWulangan = `-- name: GetWulangan :one
SELECT
  wulangans.id,
  wulangans.title,
  wulangans.description,
  wulangans.cover_image_url,
  wulangans.thumbnail_image_url
FROM wulangans
WHERE wulangans.id = $1
AND deleted_at IS NULL
LIMIT 1
`

type GetWulanganRow struct {
	ID                uuid.UUID `json:"id"`
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
}

func (q *Queries) GetWulangan(ctx context.Context, id uuid.UUID) (GetWulanganRow, error) {
	row := q.queryRow(ctx, q.getWulanganStmt, getWulangan, id)
	var i GetWulanganRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CoverImageUrl,
		&i.ThumbnailImageUrl,
	)
	return i, err
}

const listWulangans = `-- name: ListWulangans :many
SELECT
  wulangans.id,
  wulangans.title,
  wulangans.description,
  wulangans.cover_image_url,
  wulangans.thumbnail_image_url
FROM wulangans
WHERE deleted_at IS NULL
LIMIT $1
OFFSET $2
`

type ListWulangansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListWulangansRow struct {
	ID                uuid.UUID `json:"id"`
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
}

func (q *Queries) ListWulangans(ctx context.Context, arg *ListWulangansParams) ([]ListWulangansRow, error) {
	rows, err := q.query(ctx, q.listWulangansStmt, listWulangans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWulangansRow{}
	for rows.Next() {
		var i ListWulangansRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverImageUrl,
			&i.ThumbnailImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWulangan = `-- name: UpdateWulangan :one
UPDATE wulangans
SET
  title = $1,
  description = $2,
  cover_image_url = $3,
  thumbnail_image_url = $4,
  updated_at = NOW()
WHERE wulangans.id = $5
RETURNING
  id,
  title,
  description,
  cover_image_url,
  thumbnail_image_url,
  created_at,
  updated_at
`

type UpdateWulanganParams struct {
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
	ID                uuid.UUID `json:"id"`
}

type UpdateWulanganRow struct {
	ID                uuid.UUID `json:"id"`
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) UpdateWulangan(ctx context.Context, arg *UpdateWulanganParams) (UpdateWulanganRow, error) {
	row := q.queryRow(ctx, q.updateWulanganStmt, updateWulangan,
		arg.Title,
		arg.Description,
		arg.CoverImageUrl,
		arg.ThumbnailImageUrl,
		arg.ID,
	)
	var i UpdateWulanganRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CoverImageUrl,
		&i.ThumbnailImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
