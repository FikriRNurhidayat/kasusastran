// Code generated by sqlc. DO NOT EDIT.
// source: serats.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countSerats = `-- name: CountSerats :one
SELECT COUNT(serats.id) FROM serats WHERE deleted_at IS NULL
`

func (q *Queries) CountSerats(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countSeratsStmt, countSerats)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSerat = `-- name: CreateSerat :one
INSERT INTO serats (
  title,
  description,
  body,
  cover_image_url,
  thumbnail_image_url,
  created_at,
  updated_at
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  NOW(),
  NOW()
)
RETURNING
  id,
  title,
  description,
  body,
  cover_image_url,
  thumbnail_image_url,
  created_at,
  updated_at
`

type CreateSeratParams struct {
	Title             string `json:"title"`
	Description       string `json:"description"`
	Body              string `json:"body"`
	CoverImageUrl     string `json:"cover_image_url"`
	ThumbnailImageUrl string `json:"thumbnail_image_url"`
}

type CreateSeratRow struct {
	ID                uuid.UUID `json:"id"`
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	Body              string    `json:"body"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateSerat(ctx context.Context, arg *CreateSeratParams) (CreateSeratRow, error) {
	row := q.queryRow(ctx, q.createSeratStmt, createSerat,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.CoverImageUrl,
		arg.ThumbnailImageUrl,
	)
	var i CreateSeratRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CoverImageUrl,
		&i.ThumbnailImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSerat = `-- name: DeleteSerat :exec
UPDATE serats SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteSerat(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteSeratStmt, deleteSerat, id)
	return err
}

const getSerat = `-- name: GetSerat :one
SELECT
  serats.id,
  serats.title,
  serats.description,
  serats.body,
  serats.cover_image_url,
  serats.thumbnail_image_url
FROM serats
WHERE serats.id = $1
AND deleted_at IS NULL
LIMIT 1
`

type GetSeratRow struct {
	ID                uuid.UUID `json:"id"`
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	Body              string    `json:"body"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
}

func (q *Queries) GetSerat(ctx context.Context, id uuid.UUID) (GetSeratRow, error) {
	row := q.queryRow(ctx, q.getSeratStmt, getSerat, id)
	var i GetSeratRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CoverImageUrl,
		&i.ThumbnailImageUrl,
	)
	return i, err
}

const listSerats = `-- name: ListSerats :many
SELECT
  serats.id,
  serats.title,
  serats.description,
  serats.cover_image_url,
  serats.thumbnail_image_url
FROM serats
WHERE deleted_at IS NULL
LIMIT $1
OFFSET $2
`

type ListSeratsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSeratsRow struct {
	ID                uuid.UUID `json:"id"`
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
}

func (q *Queries) ListSerats(ctx context.Context, arg *ListSeratsParams) ([]ListSeratsRow, error) {
	rows, err := q.query(ctx, q.listSeratsStmt, listSerats, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSeratsRow{}
	for rows.Next() {
		var i ListSeratsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverImageUrl,
			&i.ThumbnailImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSerat = `-- name: UpdateSerat :one
UPDATE serats
SET
  title = $1,
  description = $2,
  body = $3,
  cover_image_url = $4,
  thumbnail_image_url = $5,
  updated_at = NOW()
WHERE serats.id = $6
RETURNING
  id,
  title,
  body,
  description,
  cover_image_url,
  thumbnail_image_url,
  created_at,
  updated_at
`

type UpdateSeratParams struct {
	Title             string    `json:"title"`
	Description       string    `json:"description"`
	Body              string    `json:"body"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
	ID                uuid.UUID `json:"id"`
}

type UpdateSeratRow struct {
	ID                uuid.UUID `json:"id"`
	Title             string    `json:"title"`
	Body              string    `json:"body"`
	Description       string    `json:"description"`
	CoverImageUrl     string    `json:"cover_image_url"`
	ThumbnailImageUrl string    `json:"thumbnail_image_url"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) UpdateSerat(ctx context.Context, arg *UpdateSeratParams) (UpdateSeratRow, error) {
	row := q.queryRow(ctx, q.updateSeratStmt, updateSerat,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.CoverImageUrl,
		arg.ThumbnailImageUrl,
		arg.ID,
	)
	var i UpdateSeratRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Description,
		&i.CoverImageUrl,
		&i.ThumbnailImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
