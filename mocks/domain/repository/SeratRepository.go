// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fikrirnurhidayat/kasusastran/app/domain/entity"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/fikrirnurhidayat/kasusastran/app/domain/repository"

	uuid "github.com/google/uuid"
)

// SeratRepository is an autogenerated mock type for the SeratRepository type
type SeratRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, iserat
func (_m *SeratRepository) Create(ctx context.Context, iserat *entity.Serat) (*entity.Serat, error) {
	ret := _m.Called(ctx, iserat)

	var r0 *entity.Serat
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Serat) *entity.Serat); ok {
		r0 = rf(ctx, iserat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Serat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Serat) error); ok {
		r1 = rf(ctx, iserat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *SeratRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *SeratRepository) Get(ctx context.Context, id uuid.UUID) (*entity.Serat, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Serat
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Serat); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Serat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, query
func (_m *SeratRepository) List(ctx context.Context, query *repository.ListQuery) ([]*entity.Serat, uint32, error) {
	ret := _m.Called(ctx, query)

	var r0 []*entity.Serat
	if rf, ok := ret.Get(0).(func(context.Context, *repository.ListQuery) []*entity.Serat); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Serat)
		}
	}

	var r1 uint32
	if rf, ok := ret.Get(1).(func(context.Context, *repository.ListQuery) uint32); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *repository.ListQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, id, userat
func (_m *SeratRepository) Update(ctx context.Context, id uuid.UUID, userat *entity.Serat) (*entity.Serat, error) {
	ret := _m.Called(ctx, id, userat)

	var r0 *entity.Serat
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.Serat) *entity.Serat); ok {
		r0 = rf(ctx, id, userat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Serat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *entity.Serat) error); ok {
		r1 = rf(ctx, id, userat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
