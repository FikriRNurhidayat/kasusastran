// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fikrirnurhidayat/kasusastran/app/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SeratRepositorier is an autogenerated mock type for the SeratRepositorier type
type SeratRepositorier struct {
	mock.Mock
}

// CreateSerat provides a mock function with given fields: ctx, iserat
func (_m *SeratRepositorier) CreateSerat(ctx context.Context, iserat *entity.Serat) (*entity.Serat, error) {
	ret := _m.Called(ctx, iserat)

	var r0 *entity.Serat
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Serat) *entity.Serat); ok {
		r0 = rf(ctx, iserat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Serat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Serat) error); ok {
		r1 = rf(ctx, iserat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSerat provides a mock function with given fields: ctx, id
func (_m *SeratRepositorier) DeleteSerat(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSerat provides a mock function with given fields: ctx, id
func (_m *SeratRepositorier) GetSerat(ctx context.Context, id uuid.UUID) (*entity.Serat, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Serat
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Serat); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Serat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSerats provides a mock function with given fields: ctx, pagination
func (_m *SeratRepositorier) ListSerats(ctx context.Context, pagination *entity.Pagination) ([]entity.Serat, uint32, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []entity.Serat
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Pagination) []entity.Serat); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Serat)
		}
	}

	var r1 uint32
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Pagination) uint32); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *entity.Pagination) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateSerat provides a mock function with given fields: ctx, id, userat
func (_m *SeratRepositorier) UpdateSerat(ctx context.Context, id uuid.UUID, userat *entity.Serat) (*entity.Serat, error) {
	ret := _m.Called(ctx, id, userat)

	var r0 *entity.Serat
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.Serat) *entity.Serat); ok {
		r0 = rf(ctx, id, userat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Serat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *entity.Serat) error); ok {
		r1 = rf(ctx, id, userat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
