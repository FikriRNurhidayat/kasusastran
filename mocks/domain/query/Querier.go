// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	query "github.com/fikrirnurhidayat/kasusastran/app/domain/query"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CountSerats provides a mock function with given fields: ctx
func (_m *Querier) CountSerats(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSerat provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateSerat(ctx context.Context, arg *query.CreateSeratParams) (query.CreateSeratRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 query.CreateSeratRow
	if rf, ok := ret.Get(0).(func(context.Context, *query.CreateSeratParams) query.CreateSeratRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(query.CreateSeratRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *query.CreateSeratParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSerat provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteSerat(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSerat provides a mock function with given fields: ctx, id
func (_m *Querier) GetSerat(ctx context.Context, id uuid.UUID) (query.GetSeratRow, error) {
	ret := _m.Called(ctx, id)

	var r0 query.GetSeratRow
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) query.GetSeratRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(query.GetSeratRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSerats provides a mock function with given fields: ctx, arg
func (_m *Querier) ListSerats(ctx context.Context, arg *query.ListSeratsParams) ([]query.ListSeratsRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 []query.ListSeratsRow
	if rf, ok := ret.Get(0).(func(context.Context, *query.ListSeratsParams) []query.ListSeratsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]query.ListSeratsRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *query.ListSeratsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSerat provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateSerat(ctx context.Context, arg *query.UpdateSeratParams) (query.UpdateSeratRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 query.UpdateSeratRow
	if rf, ok := ret.Get(0).(func(context.Context, *query.UpdateSeratParams) query.UpdateSeratRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(query.UpdateSeratRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *query.UpdateSeratParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
