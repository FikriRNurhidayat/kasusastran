// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	svc "github.com/fikrirnurhidayat/kasusastran/app/domain/svc"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GetSeratService is an autogenerated mock type for the GetSeratService type
type GetSeratService struct {
	mock.Mock
}

// Call provides a mock function with given fields: ctx, id
func (_m *GetSeratService) Call(ctx context.Context, id uuid.UUID) (*svc.GetSeratResult, error) {
	ret := _m.Called(ctx, id)

	var r0 *svc.GetSeratResult
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *svc.GetSeratResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*svc.GetSeratResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetSeratService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetSeratService creates a new instance of GetSeratService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetSeratService(t mockConstructorTestingTNewGetSeratService) *GetSeratService {
	mock := &GetSeratService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
