// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	svc "github.com/fikrirnurhidayat/kasusastran/app/domain/svc"
	mock "github.com/stretchr/testify/mock"
)

// RegisterService is an autogenerated mock type for the RegisterService type
type RegisterService struct {
	mock.Mock
}

// Call provides a mock function with given fields: _a0, _a1
func (_m *RegisterService) Call(_a0 context.Context, _a1 *svc.RegisterParams) (*svc.RegisterResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *svc.RegisterResult
	if rf, ok := ret.Get(0).(func(context.Context, *svc.RegisterParams) *svc.RegisterResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*svc.RegisterResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *svc.RegisterParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegisterService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterService creates a new instance of RegisterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterService(t mockConstructorTestingTNewRegisterService) *RegisterService {
	mock := &RegisterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
