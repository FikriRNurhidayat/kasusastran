// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	event "github.com/fikrirnurhidayat/kasusastran/app/domain/event"
	mock "github.com/stretchr/testify/mock"
)

// SeratEventEmitter is an autogenerated mock type for the SeratEventEmitter type
type SeratEventEmitter struct {
	mock.Mock
}

// EmitCreatedEvent provides a mock function with given fields: message
func (_m *SeratEventEmitter) EmitCreatedEvent(message *event.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitDeletedEvent provides a mock function with given fields: message
func (_m *SeratEventEmitter) EmitDeletedEvent(message *event.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitListedEvent provides a mock function with given fields: message
func (_m *SeratEventEmitter) EmitListedEvent(message *event.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitRetrievedEvent provides a mock function with given fields: message
func (_m *SeratEventEmitter) EmitRetrievedEvent(message *event.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmitUpdatedEvent provides a mock function with given fields: message
func (_m *SeratEventEmitter) EmitUpdatedEvent(message *event.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*event.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
