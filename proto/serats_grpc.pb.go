// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeratsClient is the client API for Serats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeratsClient interface {
	ListSerats(ctx context.Context, in *ListSeratsRequest, opts ...grpc.CallOption) (*ListSeratsResponse, error)
	GetSerat(ctx context.Context, in *GetSeratRequest, opts ...grpc.CallOption) (*Serat, error)
	DeleteSerat(ctx context.Context, in *DeleteSeratRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSerat(ctx context.Context, in *CreateSeratRequest, opts ...grpc.CallOption) (*Serat, error)
	UpdateSerat(ctx context.Context, in *UpdateSeratRequest, opts ...grpc.CallOption) (*Serat, error)
}

type seratsClient struct {
	cc grpc.ClientConnInterface
}

func NewSeratsClient(cc grpc.ClientConnInterface) SeratsClient {
	return &seratsClient{cc}
}

func (c *seratsClient) ListSerats(ctx context.Context, in *ListSeratsRequest, opts ...grpc.CallOption) (*ListSeratsResponse, error) {
	out := new(ListSeratsResponse)
	err := c.cc.Invoke(ctx, "/kasusastran.Serats/ListSerats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seratsClient) GetSerat(ctx context.Context, in *GetSeratRequest, opts ...grpc.CallOption) (*Serat, error) {
	out := new(Serat)
	err := c.cc.Invoke(ctx, "/kasusastran.Serats/GetSerat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seratsClient) DeleteSerat(ctx context.Context, in *DeleteSeratRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kasusastran.Serats/DeleteSerat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seratsClient) CreateSerat(ctx context.Context, in *CreateSeratRequest, opts ...grpc.CallOption) (*Serat, error) {
	out := new(Serat)
	err := c.cc.Invoke(ctx, "/kasusastran.Serats/CreateSerat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seratsClient) UpdateSerat(ctx context.Context, in *UpdateSeratRequest, opts ...grpc.CallOption) (*Serat, error) {
	out := new(Serat)
	err := c.cc.Invoke(ctx, "/kasusastran.Serats/UpdateSerat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeratsServer is the server API for Serats service.
// All implementations should embed UnimplementedSeratsServer
// for forward compatibility
type SeratsServer interface {
	ListSerats(context.Context, *ListSeratsRequest) (*ListSeratsResponse, error)
	GetSerat(context.Context, *GetSeratRequest) (*Serat, error)
	DeleteSerat(context.Context, *DeleteSeratRequest) (*emptypb.Empty, error)
	CreateSerat(context.Context, *CreateSeratRequest) (*Serat, error)
	UpdateSerat(context.Context, *UpdateSeratRequest) (*Serat, error)
}

// UnimplementedSeratsServer should be embedded to have forward compatible implementations.
type UnimplementedSeratsServer struct {
}

func (UnimplementedSeratsServer) ListSerats(context.Context, *ListSeratsRequest) (*ListSeratsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSerats not implemented")
}
func (UnimplementedSeratsServer) GetSerat(context.Context, *GetSeratRequest) (*Serat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSerat not implemented")
}
func (UnimplementedSeratsServer) DeleteSerat(context.Context, *DeleteSeratRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSerat not implemented")
}
func (UnimplementedSeratsServer) CreateSerat(context.Context, *CreateSeratRequest) (*Serat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSerat not implemented")
}
func (UnimplementedSeratsServer) UpdateSerat(context.Context, *UpdateSeratRequest) (*Serat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSerat not implemented")
}

// UnsafeSeratsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeratsServer will
// result in compilation errors.
type UnsafeSeratsServer interface {
	mustEmbedUnimplementedSeratsServer()
}

func RegisterSeratsServer(s grpc.ServiceRegistrar, srv SeratsServer) {
	s.RegisterService(&Serats_ServiceDesc, srv)
}

func _Serats_ListSerats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeratsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeratsServer).ListSerats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Serats/ListSerats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeratsServer).ListSerats(ctx, req.(*ListSeratsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serats_GetSerat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeratRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeratsServer).GetSerat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Serats/GetSerat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeratsServer).GetSerat(ctx, req.(*GetSeratRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serats_DeleteSerat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeratRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeratsServer).DeleteSerat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Serats/DeleteSerat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeratsServer).DeleteSerat(ctx, req.(*DeleteSeratRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serats_CreateSerat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeratRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeratsServer).CreateSerat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Serats/CreateSerat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeratsServer).CreateSerat(ctx, req.(*CreateSeratRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serats_UpdateSerat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeratRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeratsServer).UpdateSerat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Serats/UpdateSerat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeratsServer).UpdateSerat(ctx, req.(*UpdateSeratRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Serats_ServiceDesc is the grpc.ServiceDesc for Serats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kasusastran.Serats",
	HandlerType: (*SeratsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSerats",
			Handler:    _Serats_ListSerats_Handler,
		},
		{
			MethodName: "GetSerat",
			Handler:    _Serats_GetSerat_Handler,
		},
		{
			MethodName: "DeleteSerat",
			Handler:    _Serats_DeleteSerat_Handler,
		},
		{
			MethodName: "CreateSerat",
			Handler:    _Serats_CreateSerat_Handler,
		},
		{
			MethodName: "UpdateSerat",
			Handler:    _Serats_UpdateSerat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serats.proto",
}
