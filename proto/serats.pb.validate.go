// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: serats.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _serats_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListSeratsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSeratsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSeratsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSeratsRequestMultiError, or nil if none found.
func (m *ListSeratsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSeratsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSeratsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSeratsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSeratsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSeratsRequestMultiError(errors)
	}

	return nil
}

// ListSeratsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSeratsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSeratsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSeratsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSeratsRequestMultiError) AllErrors() []error { return m }

// ListSeratsRequestValidationError is the validation error returned by
// ListSeratsRequest.Validate if the designated constraints aren't met.
type ListSeratsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSeratsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSeratsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSeratsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSeratsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSeratsRequestValidationError) ErrorName() string {
	return "ListSeratsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSeratsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSeratsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSeratsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSeratsRequestValidationError{}

// Validate checks the field values on ListSeratsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSeratsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSeratsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSeratsResponseMultiError, or nil if none found.
func (m *ListSeratsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSeratsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSeratsResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSeratsResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSeratsResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSerats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSeratsResponseValidationError{
						field:  fmt.Sprintf("Serats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSeratsResponseValidationError{
						field:  fmt.Sprintf("Serats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSeratsResponseValidationError{
					field:  fmt.Sprintf("Serats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSeratsResponseMultiError(errors)
	}

	return nil
}

// ListSeratsResponseMultiError is an error wrapping multiple validation errors
// returned by ListSeratsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListSeratsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSeratsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSeratsResponseMultiError) AllErrors() []error { return m }

// ListSeratsResponseValidationError is the validation error returned by
// ListSeratsResponse.Validate if the designated constraints aren't met.
type ListSeratsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSeratsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSeratsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSeratsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSeratsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSeratsResponseValidationError) ErrorName() string {
	return "ListSeratsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSeratsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSeratsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSeratsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSeratsResponseValidationError{}

// Validate checks the field values on GetSeratRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSeratRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSeratRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSeratRequestMultiError, or nil if none found.
func (m *GetSeratRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSeratRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSeratRequestMultiError(errors)
	}

	return nil
}

// GetSeratRequestMultiError is an error wrapping multiple validation errors
// returned by GetSeratRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSeratRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSeratRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSeratRequestMultiError) AllErrors() []error { return m }

// GetSeratRequestValidationError is the validation error returned by
// GetSeratRequest.Validate if the designated constraints aren't met.
type GetSeratRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSeratRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSeratRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSeratRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSeratRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSeratRequestValidationError) ErrorName() string { return "GetSeratRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSeratRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSeratRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSeratRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSeratRequestValidationError{}

// Validate checks the field values on DeleteSeratRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSeratRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSeratRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSeratRequestMultiError, or nil if none found.
func (m *DeleteSeratRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSeratRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSeratRequestMultiError(errors)
	}

	return nil
}

// DeleteSeratRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteSeratRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteSeratRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSeratRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSeratRequestMultiError) AllErrors() []error { return m }

// DeleteSeratRequestValidationError is the validation error returned by
// DeleteSeratRequest.Validate if the designated constraints aren't met.
type DeleteSeratRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSeratRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSeratRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSeratRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSeratRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSeratRequestValidationError) ErrorName() string {
	return "DeleteSeratRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSeratRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSeratRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSeratRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSeratRequestValidationError{}

// Validate checks the field values on CreateSeratRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSeratRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSeratRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSeratRequestMultiError, or nil if none found.
func (m *CreateSeratRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSeratRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 255 {
		err := CreateSeratRequestValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 2 || l > 255 {
		err := CreateSeratRequestValidationError{
			field:  "Description",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetCoverImageUrl()); err != nil {
		err = CreateSeratRequestValidationError{
			field:  "CoverImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateSeratRequestValidationError{
			field:  "CoverImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetThumbnailImageUrl()); err != nil {
		err = CreateSeratRequestValidationError{
			field:  "ThumbnailImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateSeratRequestValidationError{
			field:  "ThumbnailImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSeratRequestMultiError(errors)
	}

	return nil
}

// CreateSeratRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSeratRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSeratRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSeratRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSeratRequestMultiError) AllErrors() []error { return m }

// CreateSeratRequestValidationError is the validation error returned by
// CreateSeratRequest.Validate if the designated constraints aren't met.
type CreateSeratRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSeratRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSeratRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSeratRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSeratRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSeratRequestValidationError) ErrorName() string {
	return "CreateSeratRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSeratRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSeratRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSeratRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSeratRequestValidationError{}

// Validate checks the field values on UpdateSeratRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSeratRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSeratRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSeratRequestMultiError, or nil if none found.
func (m *UpdateSeratRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSeratRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateSeratRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 255 {
		err := UpdateSeratRequestValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 2 || l > 255 {
		err := UpdateSeratRequestValidationError{
			field:  "Description",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetCoverImageUrl()); err != nil {
		err = UpdateSeratRequestValidationError{
			field:  "CoverImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := UpdateSeratRequestValidationError{
			field:  "CoverImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetThumbnailImageUrl()); err != nil {
		err = UpdateSeratRequestValidationError{
			field:  "ThumbnailImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := UpdateSeratRequestValidationError{
			field:  "ThumbnailImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateSeratRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateSeratRequest) _validateUuid(uuid string) error {
	if matched := _serats_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateSeratRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateSeratRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateSeratRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSeratRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSeratRequestMultiError) AllErrors() []error { return m }

// UpdateSeratRequestValidationError is the validation error returned by
// UpdateSeratRequest.Validate if the designated constraints aren't met.
type UpdateSeratRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSeratRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSeratRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSeratRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSeratRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSeratRequestValidationError) ErrorName() string {
	return "UpdateSeratRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSeratRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSeratRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSeratRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSeratRequestValidationError{}

// Validate checks the field values on Serat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Serat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Serat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SeratMultiError, or nil if none found.
func (m *Serat) ValidateAll() error {
	return m.validate(true)
}

func (m *Serat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for CoverImageUrl

	// no validation rules for ThumbnailImageUrl

	if len(errors) > 0 {
		return SeratMultiError(errors)
	}

	return nil
}

// SeratMultiError is an error wrapping multiple validation errors returned by
// Serat.ValidateAll() if the designated constraints aren't met.
type SeratMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeratMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeratMultiError) AllErrors() []error { return m }

// SeratValidationError is the validation error returned by Serat.Validate if
// the designated constraints aren't met.
type SeratValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeratValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeratValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeratValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeratValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeratValidationError) ErrorName() string { return "SeratValidationError" }

// Error satisfies the builtin error interface
func (e SeratValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSerat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeratValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeratValidationError{}

// Validate checks the field values on ListSeratsResponse_MetaListSerats with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSeratsResponse_MetaListSerats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSeratsResponse_MetaListSerats
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSeratsResponse_MetaListSeratsMultiError, or nil if none found.
func (m *ListSeratsResponse_MetaListSerats) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSeratsResponse_MetaListSerats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSeratsResponse_MetaListSeratsValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSeratsResponse_MetaListSeratsValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSeratsResponse_MetaListSeratsValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSeratsResponse_MetaListSeratsMultiError(errors)
	}

	return nil
}

// ListSeratsResponse_MetaListSeratsMultiError is an error wrapping multiple
// validation errors returned by
// ListSeratsResponse_MetaListSerats.ValidateAll() if the designated
// constraints aren't met.
type ListSeratsResponse_MetaListSeratsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSeratsResponse_MetaListSeratsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSeratsResponse_MetaListSeratsMultiError) AllErrors() []error { return m }

// ListSeratsResponse_MetaListSeratsValidationError is the validation error
// returned by ListSeratsResponse_MetaListSerats.Validate if the designated
// constraints aren't met.
type ListSeratsResponse_MetaListSeratsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSeratsResponse_MetaListSeratsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSeratsResponse_MetaListSeratsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSeratsResponse_MetaListSeratsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSeratsResponse_MetaListSeratsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSeratsResponse_MetaListSeratsValidationError) ErrorName() string {
	return "ListSeratsResponse_MetaListSeratsValidationError"
}

// Error satisfies the builtin error interface
func (e ListSeratsResponse_MetaListSeratsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSeratsResponse_MetaListSerats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSeratsResponse_MetaListSeratsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSeratsResponse_MetaListSeratsValidationError{}
