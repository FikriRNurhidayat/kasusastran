// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WulangansClient is the client API for Wulangans service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WulangansClient interface {
	ListWulangans(ctx context.Context, in *ListWulangansRequest, opts ...grpc.CallOption) (*ListWulangansResponse, error)
	GetWulangan(ctx context.Context, in *GetWulanganRequest, opts ...grpc.CallOption) (*Wulangan, error)
	DeleteWulangan(ctx context.Context, in *DeleteWulanganRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateWulangan(ctx context.Context, in *CreateWulanganRequest, opts ...grpc.CallOption) (*Wulangan, error)
	UpdateWulangan(ctx context.Context, in *UpdateWulanganRequest, opts ...grpc.CallOption) (*Wulangan, error)
}

type wulangansClient struct {
	cc grpc.ClientConnInterface
}

func NewWulangansClient(cc grpc.ClientConnInterface) WulangansClient {
	return &wulangansClient{cc}
}

func (c *wulangansClient) ListWulangans(ctx context.Context, in *ListWulangansRequest, opts ...grpc.CallOption) (*ListWulangansResponse, error) {
	out := new(ListWulangansResponse)
	err := c.cc.Invoke(ctx, "/kasusastran.Wulangans/ListWulangans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wulangansClient) GetWulangan(ctx context.Context, in *GetWulanganRequest, opts ...grpc.CallOption) (*Wulangan, error) {
	out := new(Wulangan)
	err := c.cc.Invoke(ctx, "/kasusastran.Wulangans/GetWulangan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wulangansClient) DeleteWulangan(ctx context.Context, in *DeleteWulanganRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kasusastran.Wulangans/DeleteWulangan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wulangansClient) CreateWulangan(ctx context.Context, in *CreateWulanganRequest, opts ...grpc.CallOption) (*Wulangan, error) {
	out := new(Wulangan)
	err := c.cc.Invoke(ctx, "/kasusastran.Wulangans/CreateWulangan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wulangansClient) UpdateWulangan(ctx context.Context, in *UpdateWulanganRequest, opts ...grpc.CallOption) (*Wulangan, error) {
	out := new(Wulangan)
	err := c.cc.Invoke(ctx, "/kasusastran.Wulangans/UpdateWulangan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WulangansServer is the server API for Wulangans service.
// All implementations should embed UnimplementedWulangansServer
// for forward compatibility
type WulangansServer interface {
	ListWulangans(context.Context, *ListWulangansRequest) (*ListWulangansResponse, error)
	GetWulangan(context.Context, *GetWulanganRequest) (*Wulangan, error)
	DeleteWulangan(context.Context, *DeleteWulanganRequest) (*emptypb.Empty, error)
	CreateWulangan(context.Context, *CreateWulanganRequest) (*Wulangan, error)
	UpdateWulangan(context.Context, *UpdateWulanganRequest) (*Wulangan, error)
}

// UnimplementedWulangansServer should be embedded to have forward compatible implementations.
type UnimplementedWulangansServer struct {
}

func (UnimplementedWulangansServer) ListWulangans(context.Context, *ListWulangansRequest) (*ListWulangansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWulangans not implemented")
}
func (UnimplementedWulangansServer) GetWulangan(context.Context, *GetWulanganRequest) (*Wulangan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWulangan not implemented")
}
func (UnimplementedWulangansServer) DeleteWulangan(context.Context, *DeleteWulanganRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWulangan not implemented")
}
func (UnimplementedWulangansServer) CreateWulangan(context.Context, *CreateWulanganRequest) (*Wulangan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWulangan not implemented")
}
func (UnimplementedWulangansServer) UpdateWulangan(context.Context, *UpdateWulanganRequest) (*Wulangan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWulangan not implemented")
}

// UnsafeWulangansServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WulangansServer will
// result in compilation errors.
type UnsafeWulangansServer interface {
	mustEmbedUnimplementedWulangansServer()
}

func RegisterWulangansServer(s grpc.ServiceRegistrar, srv WulangansServer) {
	s.RegisterService(&Wulangans_ServiceDesc, srv)
}

func _Wulangans_ListWulangans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWulangansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WulangansServer).ListWulangans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Wulangans/ListWulangans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WulangansServer).ListWulangans(ctx, req.(*ListWulangansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wulangans_GetWulangan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWulanganRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WulangansServer).GetWulangan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Wulangans/GetWulangan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WulangansServer).GetWulangan(ctx, req.(*GetWulanganRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wulangans_DeleteWulangan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWulanganRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WulangansServer).DeleteWulangan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Wulangans/DeleteWulangan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WulangansServer).DeleteWulangan(ctx, req.(*DeleteWulanganRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wulangans_CreateWulangan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWulanganRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WulangansServer).CreateWulangan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Wulangans/CreateWulangan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WulangansServer).CreateWulangan(ctx, req.(*CreateWulanganRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wulangans_UpdateWulangan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWulanganRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WulangansServer).UpdateWulangan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasusastran.Wulangans/UpdateWulangan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WulangansServer).UpdateWulangan(ctx, req.(*UpdateWulanganRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wulangans_ServiceDesc is the grpc.ServiceDesc for Wulangans service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wulangans_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kasusastran.Wulangans",
	HandlerType: (*WulangansServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWulangans",
			Handler:    _Wulangans_ListWulangans_Handler,
		},
		{
			MethodName: "GetWulangan",
			Handler:    _Wulangans_GetWulangan_Handler,
		},
		{
			MethodName: "DeleteWulangan",
			Handler:    _Wulangans_DeleteWulangan_Handler,
		},
		{
			MethodName: "CreateWulangan",
			Handler:    _Wulangans_CreateWulangan_Handler,
		},
		{
			MethodName: "UpdateWulangan",
			Handler:    _Wulangans_UpdateWulangan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wulangan.proto",
}
