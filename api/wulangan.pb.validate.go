// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wulangan.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _wulangan_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListWulangansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWulangansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWulangansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWulangansRequestMultiError, or nil if none found.
func (m *ListWulangansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWulangansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWulangansRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWulangansRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWulangansRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWulangansRequestMultiError(errors)
	}

	return nil
}

// ListWulangansRequestMultiError is an error wrapping multiple validation
// errors returned by ListWulangansRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWulangansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWulangansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWulangansRequestMultiError) AllErrors() []error { return m }

// ListWulangansRequestValidationError is the validation error returned by
// ListWulangansRequest.Validate if the designated constraints aren't met.
type ListWulangansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWulangansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWulangansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWulangansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWulangansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWulangansRequestValidationError) ErrorName() string {
	return "ListWulangansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWulangansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWulangansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWulangansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWulangansRequestValidationError{}

// Validate checks the field values on ListWulangansResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWulangansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWulangansResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWulangansResponseMultiError, or nil if none found.
func (m *ListWulangansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWulangansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWulangansResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWulangansResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWulangansResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWulangans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWulangansResponseValidationError{
						field:  fmt.Sprintf("Wulangans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWulangansResponseValidationError{
						field:  fmt.Sprintf("Wulangans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWulangansResponseValidationError{
					field:  fmt.Sprintf("Wulangans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWulangansResponseMultiError(errors)
	}

	return nil
}

// ListWulangansResponseMultiError is an error wrapping multiple validation
// errors returned by ListWulangansResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWulangansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWulangansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWulangansResponseMultiError) AllErrors() []error { return m }

// ListWulangansResponseValidationError is the validation error returned by
// ListWulangansResponse.Validate if the designated constraints aren't met.
type ListWulangansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWulangansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWulangansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWulangansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWulangansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWulangansResponseValidationError) ErrorName() string {
	return "ListWulangansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWulangansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWulangansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWulangansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWulangansResponseValidationError{}

// Validate checks the field values on GetWulanganRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWulanganRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWulanganRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWulanganRequestMultiError, or nil if none found.
func (m *GetWulanganRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWulanganRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetWulanganRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWulanganRequestMultiError(errors)
	}

	return nil
}

func (m *GetWulanganRequest) _validateUuid(uuid string) error {
	if matched := _wulangan_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetWulanganRequestMultiError is an error wrapping multiple validation errors
// returned by GetWulanganRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWulanganRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWulanganRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWulanganRequestMultiError) AllErrors() []error { return m }

// GetWulanganRequestValidationError is the validation error returned by
// GetWulanganRequest.Validate if the designated constraints aren't met.
type GetWulanganRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWulanganRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWulanganRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWulanganRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWulanganRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWulanganRequestValidationError) ErrorName() string {
	return "GetWulanganRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWulanganRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWulanganRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWulanganRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWulanganRequestValidationError{}

// Validate checks the field values on DeleteWulanganRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWulanganRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWulanganRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWulanganRequestMultiError, or nil if none found.
func (m *DeleteWulanganRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWulanganRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteWulanganRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWulanganRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteWulanganRequest) _validateUuid(uuid string) error {
	if matched := _wulangan_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteWulanganRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWulanganRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWulanganRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWulanganRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWulanganRequestMultiError) AllErrors() []error { return m }

// DeleteWulanganRequestValidationError is the validation error returned by
// DeleteWulanganRequest.Validate if the designated constraints aren't met.
type DeleteWulanganRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWulanganRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWulanganRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWulanganRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWulanganRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWulanganRequestValidationError) ErrorName() string {
	return "DeleteWulanganRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWulanganRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWulanganRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWulanganRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWulanganRequestValidationError{}

// Validate checks the field values on CreateWulanganRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWulanganRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWulanganRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWulanganRequestMultiError, or nil if none found.
func (m *CreateWulanganRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWulanganRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 255 {
		err := CreateWulanganRequestValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 2 || l > 255 {
		err := CreateWulanganRequestValidationError{
			field:  "Description",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetCoverImageUrl()); err != nil {
		err = CreateWulanganRequestValidationError{
			field:  "CoverImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateWulanganRequestValidationError{
			field:  "CoverImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetThumbnailImageUrl()); err != nil {
		err = CreateWulanganRequestValidationError{
			field:  "ThumbnailImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateWulanganRequestValidationError{
			field:  "ThumbnailImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWulanganRequestMultiError(errors)
	}

	return nil
}

// CreateWulanganRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWulanganRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWulanganRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWulanganRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWulanganRequestMultiError) AllErrors() []error { return m }

// CreateWulanganRequestValidationError is the validation error returned by
// CreateWulanganRequest.Validate if the designated constraints aren't met.
type CreateWulanganRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWulanganRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWulanganRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWulanganRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWulanganRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWulanganRequestValidationError) ErrorName() string {
	return "CreateWulanganRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWulanganRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWulanganRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWulanganRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWulanganRequestValidationError{}

// Validate checks the field values on UpdateWulanganRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWulanganRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWulanganRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWulanganRequestMultiError, or nil if none found.
func (m *UpdateWulanganRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWulanganRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateWulanganRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 255 {
		err := UpdateWulanganRequestValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 2 || l > 255 {
		err := UpdateWulanganRequestValidationError{
			field:  "Description",
			reason: "value length must be between 2 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetCoverImageUrl()); err != nil {
		err = UpdateWulanganRequestValidationError{
			field:  "CoverImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := UpdateWulanganRequestValidationError{
			field:  "CoverImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetThumbnailImageUrl()); err != nil {
		err = UpdateWulanganRequestValidationError{
			field:  "ThumbnailImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := UpdateWulanganRequestValidationError{
			field:  "ThumbnailImageUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateWulanganRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateWulanganRequest) _validateUuid(uuid string) error {
	if matched := _wulangan_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateWulanganRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWulanganRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWulanganRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWulanganRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWulanganRequestMultiError) AllErrors() []error { return m }

// UpdateWulanganRequestValidationError is the validation error returned by
// UpdateWulanganRequest.Validate if the designated constraints aren't met.
type UpdateWulanganRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWulanganRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWulanganRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWulanganRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWulanganRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWulanganRequestValidationError) ErrorName() string {
	return "UpdateWulanganRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWulanganRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWulanganRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWulanganRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWulanganRequestValidationError{}

// Validate checks the field values on Wulangan with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Wulangan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Wulangan with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WulanganMultiError, or nil
// if none found.
func (m *Wulangan) ValidateAll() error {
	return m.validate(true)
}

func (m *Wulangan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for CoverImageUrl

	// no validation rules for ThumbnailImageUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WulanganValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WulanganValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WulanganValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WulanganValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WulanganValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WulanganValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WulanganMultiError(errors)
	}

	return nil
}

// WulanganMultiError is an error wrapping multiple validation errors returned
// by Wulangan.ValidateAll() if the designated constraints aren't met.
type WulanganMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WulanganMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WulanganMultiError) AllErrors() []error { return m }

// WulanganValidationError is the validation error returned by
// Wulangan.Validate if the designated constraints aren't met.
type WulanganValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WulanganValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WulanganValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WulanganValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WulanganValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WulanganValidationError) ErrorName() string { return "WulanganValidationError" }

// Error satisfies the builtin error interface
func (e WulanganValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWulangan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WulanganValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WulanganValidationError{}

// Validate checks the field values on ListWulangansResponse_MetaListWulangans
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListWulangansResponse_MetaListWulangans) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWulangansResponse_MetaListWulangans with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListWulangansResponse_MetaListWulangansMultiError, or nil if none found.
func (m *ListWulangansResponse_MetaListWulangans) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWulangansResponse_MetaListWulangans) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWulangansResponse_MetaListWulangansValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWulangansResponse_MetaListWulangansValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWulangansResponse_MetaListWulangansValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWulangansResponse_MetaListWulangansMultiError(errors)
	}

	return nil
}

// ListWulangansResponse_MetaListWulangansMultiError is an error wrapping
// multiple validation errors returned by
// ListWulangansResponse_MetaListWulangans.ValidateAll() if the designated
// constraints aren't met.
type ListWulangansResponse_MetaListWulangansMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWulangansResponse_MetaListWulangansMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWulangansResponse_MetaListWulangansMultiError) AllErrors() []error { return m }

// ListWulangansResponse_MetaListWulangansValidationError is the validation
// error returned by ListWulangansResponse_MetaListWulangans.Validate if the
// designated constraints aren't met.
type ListWulangansResponse_MetaListWulangansValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWulangansResponse_MetaListWulangansValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWulangansResponse_MetaListWulangansValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWulangansResponse_MetaListWulangansValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWulangansResponse_MetaListWulangansValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWulangansResponse_MetaListWulangansValidationError) ErrorName() string {
	return "ListWulangansResponse_MetaListWulangansValidationError"
}

// Error satisfies the builtin error interface
func (e ListWulangansResponse_MetaListWulangansValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWulangansResponse_MetaListWulangans.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWulangansResponse_MetaListWulangansValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWulangansResponse_MetaListWulangansValidationError{}
